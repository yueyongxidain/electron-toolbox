"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// src/main/tensorflow/index.ts
var tf = __toESM(require("@tensorflow/tfjs-node"));
function main() {
  const model = tf.sequential();
  model.add(tf.layers.dense({ units: 1, inputShape: [1] }));
  model.compile({ loss: "meanSquaredError", optimizer: "sgd" });
  const inputString = "1397603459@qq.com";
  const outputString = "^w+(-+.w+)*@w+(-.w+)*.w+(-.w+)*$";
  const xs = tf.tensor(inputString.split("").map((e) => e.charCodeAt(0)));
  const ys = tf.tensor(outputString.split("").map((e) => e.charCodeAt(0)));
  model.fit(xs, ys, { epochs: 10 }).then(() => {
    const output = model.predict(tf.tensor2d([5], [1, 1]));
    output.print();
  });
}
var tensorflow_default = main;

// src/main/index.ts
var { app, BrowserWindow } = require("electron");
var shell = require("shelljs");
var dotenv = require("dotenv");
var path = require("path");
dotenv.config();
var createWindow = () => {
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      preload: path.join(__dirname, "../preload/index.js"),
      devTools: true,
      nodeIntegration: true,
      contextIsolation: true,
      webSecurity: false
    }
  });
  process.env.NODE_ENV === "dev" ? win.loadURL("http://localhost:3000") : win.loadFile("./dist/index.html");
  win.webContents.openDevTools();
};
var execDockerShell = () => {
  shell.config.execPath = shell.which("node").toString();
  if (!shell.which("docker")) {
    shell.echo("Sorry, this script requires docker");
    shell.exit(1);
  }
};
app.whenReady().then(() => {
  tensorflow_default();
  createWindow();
  execDockerShell();
});
app.on("window-all-closed", () => {
  if (process.platform !== "darwin")
    app.quit();
});
//# sourceMappingURL=index.min.js.map
