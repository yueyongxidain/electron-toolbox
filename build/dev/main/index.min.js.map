{
  "version": 3,
  "sources": ["../../../src/main/tensorflow/index.ts", "../../../src/main/index.ts"],
  "sourcesContent": ["import * as tf from \"@tensorflow/tfjs-node\";\n\nfunction main() {\n  // \u5B9A\u4E49\u6A21\u578B\n  const model = tf.sequential();\n  model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n\n  // \u7F16\u8BD1\u6A21\u578B\n  model.compile({ loss: \"meanSquaredError\", optimizer: \"sgd\" });\n\n  // \u51C6\u5907\u6570\u636E\n  const inputString = '1397603459@qq.com'\n  const outputString ='^\\w+(-+.\\w+)*@\\w+(-.\\w+)*.\\w+(-.\\w+)*$'\n\n\n\n\n  const xs = tf.tensor(inputString.split('').map(e=>e.charCodeAt(0)));\n  const ys = tf.tensor(outputString.split('').map(e=>e.charCodeAt(0)));\n\n  // \u8BAD\u7EC3\u6A21\u578B\n  model.fit(xs, ys, { epochs: 10 }).then(() => {\n    // \u4F7F\u7528\u6A21\u578B\u8FDB\u884C\u9884\u6D4B\n    const output: any = model.predict(tf.tensor2d([5], [1, 1]));\n    output.print();\n  });\n}\n\nexport default main", "const { app, BrowserWindow } = require(\"electron\");\nconst shell = require(\"shelljs\");\nconst dotenv = require(\"dotenv\");\nconst path = require('path')\nimport tensorflow from './tensorflow'\n\ndotenv.config();\n\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      preload: path.join(__dirname, '../preload/index.js'),\n      devTools: true,\n      nodeIntegration: true,\n      contextIsolation:true,\n      webSecurity: false\n    }\n  });\n  process.env.NODE_ENV === \"dev\"\n    ? win.loadURL(\"http://localhost:3000\")\n    : win.loadFile(\"./dist/index.html\");\n    win.webContents.openDevTools()\n};\n\nconst execDockerShell = () => {\n  shell.config.execPath = shell.which(\"node\").toString();\n  if (!shell.which(\"docker\")) {\n    shell.echo(\"Sorry, this script requires docker\");\n    shell.exit(1);\n  } \n};\n\n\n\napp.whenReady().then(() => {\n  tensorflow()\n  createWindow();\n  execDockerShell();\n});\napp.on(\"window-all-closed\", () => {\n  if (process.platform !== \"darwin\") app.quit();\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAoB;AAEpB,SAAS,OAAO;AAEd,QAAM,QAAW,cAAW;AAC5B,QAAM,IAAO,UAAO,MAAM,EAAE,OAAO,GAAG,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC;AAGxD,QAAM,QAAQ,EAAE,MAAM,oBAAoB,WAAW,MAAM,CAAC;AAG5D,QAAM,cAAc;AACpB,QAAM,eAAc;AAKpB,QAAM,KAAQ,UAAO,YAAY,MAAM,EAAE,EAAE,IAAI,OAAG,EAAE,WAAW,CAAC,CAAC,CAAC;AAClE,QAAM,KAAQ,UAAO,aAAa,MAAM,EAAE,EAAE,IAAI,OAAG,EAAE,WAAW,CAAC,CAAC,CAAC;AAGnE,QAAM,IAAI,IAAI,IAAI,EAAE,QAAQ,GAAG,CAAC,EAAE,KAAK,MAAM;AAE3C,UAAM,SAAc,MAAM,QAAW,YAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AAC1D,WAAO,MAAM;AAAA,EACf,CAAC;AACH;AAEA,IAAO,qBAAQ;;;AC5Bf,IAAM,EAAE,KAAK,cAAc,IAAI,QAAQ,UAAU;AACjD,IAAM,QAAQ,QAAQ,SAAS;AAC/B,IAAM,SAAS,QAAQ,QAAQ;AAC/B,IAAM,OAAO,QAAQ,MAAM;AAG3B,OAAO,OAAO;AAEd,IAAM,eAAe,MAAM;AACzB,QAAM,MAAM,IAAI,cAAc;AAAA,IAC5B,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,gBAAgB;AAAA,MACd,SAAS,KAAK,KAAK,WAAW,qBAAqB;AAAA,MACnD,UAAU;AAAA,MACV,iBAAiB;AAAA,MACjB,kBAAiB;AAAA,MACjB,aAAa;AAAA,IACf;AAAA,EACF,CAAC;AACD,UAAQ,IAAI,aAAa,QACrB,IAAI,QAAQ,uBAAuB,IACnC,IAAI,SAAS,mBAAmB;AAClC,MAAI,YAAY,aAAa;AACjC;AAEA,IAAM,kBAAkB,MAAM;AAC5B,QAAM,OAAO,WAAW,MAAM,MAAM,MAAM,EAAE,SAAS;AACrD,MAAI,CAAC,MAAM,MAAM,QAAQ,GAAG;AAC1B,UAAM,KAAK,oCAAoC;AAC/C,UAAM,KAAK,CAAC;AAAA,EACd;AACF;AAIA,IAAI,UAAU,EAAE,KAAK,MAAM;AACzB,qBAAW;AACX,eAAa;AACb,kBAAgB;AAClB,CAAC;AACD,IAAI,GAAG,qBAAqB,MAAM;AAChC,MAAI,QAAQ,aAAa;AAAU,QAAI,KAAK;AAC9C,CAAC;",
  "names": []
}
