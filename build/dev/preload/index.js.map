{
  "version": 3,
  "sources": ["../../../src/main/docker/index.ts", "../../../src/preload/index.ts"],
  "sourcesContent": ["// \u83B7\u53D6docker \u7684\u955C\u50CF\u5217\u8868\nimport * as shell from \"shelljs\";\n\nconst getDockerImages = () => {\n  shell.config.execPath = (shell.which(\"node\") as any).toString();\n  const imagesLog = shell.exec(\"docker image ls\");\n  const stdoutArr = (imagesLog.stdout as any).split(\"\\n\");\n  // \u89E3\u6790\u5B57\u7B26\u4E32\n\n  const titleArr = [\"REPOSITORY\", \"TAG\", \"IMAGE ID\", \"CREATED\", \"SIZE\"];\n  const imageInfoList = [];\n  if (stdoutArr.length > 1) {\n    let i = 1;\n    while (i < stdoutArr.length) {\n      const imageInfoString = stdoutArr[i];\n      const imageInfoArr = imageInfoString.match(/(\\S+)/g);\n      let info: any = {};\n      if (imageInfoArr) {\n        for (let j = 0; j < titleArr.length; j++) {\n          info[titleArr[j]] = imageInfoArr[j];\n        }\n        imageInfoList.push(info);\n      }\n      i++;\n    }\n  }\n  return { title: titleArr, imageList: imageInfoList };\n};\nexport default getDockerImages;\n", "import getDockerImages from \"../main/docker\";\nimport { contextBridge } from \"electron\";\n\ncontextBridge.exposeInMainWorld(\"dockerSDk\", {\n  getDockerImages: getDockerImages,\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AACA,YAAuB;AAEvB,IAAM,kBAAkB,MAAM;AAC5B,EAAM,aAAO,WAAkB,YAAM,MAAM,EAAU,SAAS;AAC9D,QAAM,YAAkB,WAAK,iBAAiB;AAC9C,QAAM,YAAa,UAAU,OAAe,MAAM,IAAI;AAGtD,QAAM,WAAW,CAAC,cAAc,OAAO,YAAY,WAAW,MAAM;AACpE,QAAM,gBAAgB,CAAC;AACvB,MAAI,UAAU,SAAS,GAAG;AACxB,QAAI,IAAI;AACR,WAAO,IAAI,UAAU,QAAQ;AAC3B,YAAM,kBAAkB,UAAU,CAAC;AACnC,YAAM,eAAe,gBAAgB,MAAM,QAAQ;AACnD,UAAI,OAAY,CAAC;AACjB,UAAI,cAAc;AAChB,iBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,eAAK,SAAS,CAAC,CAAC,IAAI,aAAa,CAAC;AAAA,QACpC;AACA,sBAAc,KAAK,IAAI;AAAA,MACzB;AACA;AAAA,IACF;AAAA,EACF;AACA,SAAO,EAAE,OAAO,UAAU,WAAW,cAAc;AACrD;AACA,IAAO,iBAAQ;;;AC3Bf,sBAA8B;AAE9B,8BAAc,kBAAkB,aAAa;AAAA,EAC3C,iBAAiB;AACnB,CAAC;",
  "names": []
}
